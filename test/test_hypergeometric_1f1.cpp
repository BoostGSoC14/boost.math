//  (C) Copyright John Maddock 2007.
//  (C) Copyright Anton Bikineev 2014.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <pch_light.hpp>
#include <boost/math/special_functions.hpp>
#include "test_hypergeometric_1f1.hpp"

//
// DESCRIPTION:
// ~~~~~~~~~~~~
//
// This file tests the hypergeometric_1f1 function. Currently
// there are only tests generated by WolframAlpha resource.
//
// Note that when this file is first run on a new platform many of
// these tests will fail: the default accuracy is 1 epsilon which
// is too tight for most platforms.  In this situation you will
// need to cast a human eye over the error rates reported and make
// a judgement as to whether they are acceptable.  Either way please
// report the results to the Boost mailing list.  Acceptable rates of
// error are marked up below as a series of regular expressions that
// identify the compiler/stdlib/platform/data-type/test-data/test-function
// along with the maximum expected peek and RMS mean errors for that
// test.
//

void expected_results()
{
  //
  // Define the max and mean errors expected for
  // various compilers and platforms.
  //
  const char* largest_type;
#ifndef BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS
  if(boost::math::policies::digits<double, boost::math::policies::policy<> >() == boost::math::policies::digits<long double, boost::math::policies::policy<> >())
  {
    largest_type = "(long\\s+)?double";
  }
  else
  {
    largest_type = "long double";
  }
#else
  largest_type = "(long\\s+)?double";
#endif

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      "float",              // test type(s)
      ".*",                 // test data group
      ".*", 1, 1);          // test function

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      "double",             // test type(s)
      ".*rational.*",       // test data group
      ".*", 15, 2);         // test function

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      "double",             // test type(s)
      ".*pade.*",           // test data group
      ".*", 30, 3);         // test function

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      "double",             // test type(s)
      ".*",                 // test data group
      ".*", 10, 2);         // test function

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      largest_type,         // test type(s)
      ".*rational.*",       // test data group
      ".*", 26000, 2000);   // test function

  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      largest_type,         // test type(s)
      ".*pade.*",           // test data group
      ".*", 60000, 5000);   // test function

  // worst case in choice of 13.3.7 and backward recurrence
  add_expected_result(
      ".*",                 // compiler
      ".*",                 // stdlib
      ".*",                 // platform
      largest_type,         // test type(s)
      ".*",                 // test data group
      ".*", 4000, 600);     // test function
  //
  // Finish off by printing out the compiler/stdlib/platform names,
  // we do this to make it easier to mark up expected error rates.
  //
  std::cout << "Tests run with " << BOOST_COMPILER << ", "
    << BOOST_STDLIB << ", " << BOOST_PLATFORM << std::endl;
}

BOOST_AUTO_TEST_CASE( test_main )
{
  expected_results();
  BOOST_MATH_CONTROL_FP;

#ifndef BOOST_MATH_BUGGY_LARGE_FLOAT_CONSTANTS
  //test_hypergeometric(0.1F, "float");
#endif
  test_hypergeometric(0.1, "double");
#ifndef BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS
  test_hypergeometric(0.1L, "long double");
#ifndef BOOST_MATH_NO_REAL_CONCEPT_TESTS
  //test_hypergeometric(boost::math::concepts::real_concept(0.1), "real_concept");
#endif
#else
  std::cout << "<note>The long double tests have been disabled on this platform "
    "either because the long double overloads of the usual math functions are "
    "not available at all, or because they are too inaccurate for these tests "
    "to pass.</note>" << std::cout;
#endif
}




